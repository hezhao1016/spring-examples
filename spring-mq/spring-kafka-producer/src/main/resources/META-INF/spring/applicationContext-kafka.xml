<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context" xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd"
	   default-lazy-init="true">

	<!-- 定义producer的参数 -->
	<bean id="producerProperties" class="java.util.HashMap">
		<constructor-arg>
			<map>
				<!-- 指定了要连接到的broker,多个逗号分隔 -->
				<entry key="bootstrap.servers" value="${kafka.servers}" />
				<!-- 判别请求是否为完整的条件,指定了“all”将会阻塞消息，这种设置性能最低，但是是最可靠的。 -->
				<entry key="acks" value="${kafka.acks}" />
				<!-- 重试次数，默认0次，如果启用重试，则会有重复消息的可能性。 -->
				<entry key="retries" value="${kafka.retries}" />
				<!--缓存的大小(单位字节), 默认16k-->
				<entry key="batch.size" value="${kafka.batch.size}" />
				<!-- 控制生产者可用的缓存总量(单位字节)，默认32M，如果消息发送速度比其传输到服务器的快，将会耗尽这个缓存空间。当缓存空间耗尽，其他发送调用将被阻塞。 -->
				<entry key="buffer.memory" value="${kafka.buffer.memory}" />
				<!-- 默认缓冲可立即发送，即遍缓冲空间还没有满，但是，如果你想减少请求的数量，可以设置linger.ms大于0。这将指示生产者发送请求之前等待一段时间，希望更多的消息填补到未满的批中。 -->
				<entry key="linger.ms" value="${kafka.linger.ms}" />
				<!-- 阻塞时间,超出将抛出一个TimeoutException。单位毫秒 -->
				<entry key="max.block.ms" value="${kafka.max.block.ms}" />
				<!-- 用来指定key的序列化器 -->
				<entry key="key.serializer" value="${kafka.key.serializer}" />
				<!-- 用来指定value的序列化器 -->
				<entry key="value.serializer" value="${kafka.value.serializer}" />
			</map>
		</constructor-arg>
	</bean>

	<!-- 创建KafkaTemplate需要使用的producerfactory bean -->
	<bean id="producerFactory" class="org.springframework.kafka.core.DefaultKafkaProducerFactory">
		<constructor-arg>
			<ref bean="producerProperties" />
		</constructor-arg>
	</bean>

	<!-- 创建KafkaTemplate，使用的时候，只需要注入这个bean，即可使用template的send消息方法 -->
	<bean id="KafkaTemplate" class="org.springframework.kafka.core.KafkaTemplate">
		<constructor-arg ref="producerFactory" />
		<constructor-arg name="autoFlush" value="true" />
		<property name="defaultTopic" value="defaultTopic" />
	</bean>

</beans>