<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:jee="http://www.springframework.org/schema/jee" xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd"
	   default-lazy-init="true">

	<!-- 开启MVC注解 -->
	<mvc:annotation-driven />

	<!-- 开启AOP注解 -->
	<aop:aspectj-autoproxy />

	<!-- 配置视图解析器 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"/>
		<property name="suffix" value=".jsp"/><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  -->
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
	</bean>

	<!-- 对静态资源文件的访问 方案一 （二选一） -->
	<mvc:default-servlet-handler default-servlet-name="default"/>

	<!-- 对静态资源文件的访问 方案二 （二选一）-->
	<!-- <mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>
	<mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/>
	<mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/> -->

	<!--Tomcat, Jetty, JBoss, and GlassFish 自带的默认Servlet的名字  "default"
		Google App Engine 自带的 默认Servlet的名字  "_ah_default"
		Resin 自带的 默认Servlet的名字  "resin-file"
		WebLogic 自带的 默认Servlet的名字  "FileServlet"
		WebSphere 自带的 默认Servlet的名字  "SimpleFileServlet" -->

</beans>